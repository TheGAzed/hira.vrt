@page "/eitheror"

@using hiravrt.Controllers
@using hiravrt.Models.Game

@rendermode InteractiveServer
@inject MainController mc

<PageTitle>EitherOr</PageTitle>

@code {
	static int baseColor = 0x1B1B1B;
	static (int, int)[] color = new[] { (baseColor, baseColor), (baseColor, baseColor) };
	static string romanjiType = "romanji";
	static bool IsChecking = false;
}

@{
	async Task checkClick(string syllable) {
		if (!IsChecking) {
			IsChecking = true;

			int i = mc.GameC.EitherOrModel.CorrectIndex;
			color[i] = mc.GameC.LookUp.Color(mc.GameC.EitherOrModel.CurrentGuess);

			if (mc.GameC.EitherOrModel.IsCorrect(syllable)) {
				romanjiType = "romanji-correct";
			} else {
				romanjiType = "romanji-wrong";
			}

			await Task.Yield();
			await Task.Delay(1500);

			mc.GameC.UpdateModel(mc.GameC.EitherOrModel, syllable);
			color[i] = (baseColor, baseColor);
			romanjiType = "romanji";

			IsChecking = false;
		}
	}
	/*async Task checkKey(KeyboardEventArgs e) {
		switch (e.Key) {
			case "ArrowLeft":
			case "a": {
				await checkClick(mc.GameC.EitherOrModel.Guesses[0]);
			break;
			}
			case "ArrowRight":
			case "d": {
				int i = mc.GameC.EitherOrModel.CorrectIndex;
				await checkClick(mc.GameC.EitherOrModel.Guesses[1]);
			break;
	}
	}
			}
	*/
}

<link rel="stylesheet" href="css/game/EitherOr.css" />

@if (mc.GameC.EitherOrModel.RemainingGuesses.Count < mc.GameC.EitherOrModel.MinGuessCount) {
	<Error ErrorNumber="01" ErrorDescription="NOT ENOUGH SYLLABLES TO PLAY GAME" ErrorFix="GO TO SETTINGS TO INCREASE SYLLABLE COUNT" />
} else {
	<article class="PAGE">
		<h2>EITHER OR GAMEMODE</h2>
		<h3 id="score">@mc.GameC.EitherOrModel.Score</h3>
		<section id="first">
			<style>
				a#firstpick {
					background: linear-gradient(45deg, #@color[0].Item1.ToString("x") 0%, #@color[0].Item2.ToString("x") 100%);
				}

				a#secondpick {
					background: linear-gradient(45deg, #@color[1].Item1.ToString("x") 0%, #@color[1].Item2.ToString("x") 100%);
				}
			</style>
			<a id="firstpick" @onclick="async () => {  await checkClick(mc.GameC.EitherOrModel.Guesses[0]); }" disabled="@IsChecking">
				<p lang="ja" id="firstguess">@mc.GameC.EitherOrModel.Guesses[0]</p>
			</a>

			<a id="secondpick" @onclick="async () => await checkClick(mc.GameC.EitherOrModel.Guesses[1])" disabled="@IsChecking">
				<p lang="ja" id="secondguess">@mc.GameC.EitherOrModel.Guesses[1]</p>
			</a>
			<p id="@(romanjiType)">@mc.GameC.LookUp.Latin(mc.GameC.EitherOrModel.CurrentGuess)</p>
		</section>
	</article>
}
