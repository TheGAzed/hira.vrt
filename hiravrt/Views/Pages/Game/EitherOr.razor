@page "/eitheror"

@using hiravrt.Controllers
@using hiravrt.Models.Game

@rendermode InteractiveServer
@inject MainController mc
@inject IJSRuntime JS

<PageTitle>EitherOr</PageTitle>

@code {
	static int baseColor = 0x1B1B1B;
	(int, int)[] color = new[] { (baseColor, baseColor), (baseColor, baseColor) };
	string romanjiType = "romanji";
	string guesses = "guesses";
	bool IsChecking = false;

	(int, int) ratioBefore = (0, 0), ratioAfter = (0, 0);

	protected ElementReference gameDiv;

	private void ResetProgressBar() {
		int wrong = mc.GameC.EitherOrModel.WrongGuessesCount;
		int correct = mc.GameC.EitherOrModel.CorrectGuessesCount;

		ratioBefore = ratioAfter = (wrong, correct);
	}

	protected override void OnInitialized() {
		base.OnInitialized();
		ResetProgressBar();
	}

	private void OnReset() {
		mc.GameC.EitherOrModel.Reset();
		ResetProgressBar();
	}

	async Task checkClick(string syllable) {
		if (!IsChecking) {
			IsChecking = true;

			int i = mc.GameC.EitherOrModel.CorrectIndex;
			color[i] = mc.GameC.LookUp.Color(mc.GameC.EitherOrModel.CorrectSyllable);

			ratioBefore = ratioAfter;
			if (mc.GameC.EitherOrModel.IsCorrect(syllable))
			{
				romanjiType = "romanji-correct";
				ratioAfter.Item2++;
			}
			else
			{
				romanjiType = "romanji-wrong";
				ratioAfter.Item1++;
			}
			guesses = "animate";

			await Task.Delay(1500);

			guesses = "guesses";

			mc.GameC.EitherOrModel.NextMove(syllable);
			color[i] = (baseColor, baseColor);
			romanjiType = "romanji";

			IsChecking = false;
		}
	}
}

@{
	string updateWidthWrong((int, int) ratio)
	{
		if (ratio.Item1 + ratio.Item2 == 0) return "0%";
		return (100.0 / (ratio.Item1 + ratio.Item2) * ratio.Item1).ToString().Replace(",", ".") + "%";
	}

	string updateWidthCorrect((int, int) ratio)
	{
		if (ratio.Item1 + ratio.Item2 == 0) return "0%";
		return (100.0 / (ratio.Item1 + ratio.Item2) * ratio.Item2).ToString().Replace(",", ".") + "%";
	}
}

@code {
	public async void HandleKeypress(KeyboardEventArgs input) {
		switch (input.Key) {
			case "ArrowLeft":  case "a": { await checkClick(mc.GameC.EitherOrModel.GuessesPair[0]); break; }
			case "ArrowRight": case "d": { await checkClick(mc.GameC.EitherOrModel.GuessesPair[1]); break; }
			case "r":                    { OnReset();                                               break; }

			default: { return; }
		}
		StateHasChanged();
	}
}

<link rel="stylesheet" href="css/game/EitherOr.css" />

@if (mc.GameC.EitherOrModel.RemainingSyllables.Count < mc.GameC.EitherOrModel.MinimumGuessesCount) {
	<Error ErrorNumber="01" ErrorDescription="NOT ENOUGH SYLLABLES TO PLAY GAME" ErrorFix="GO TO SETTINGS TO INCREASE SYLLABLE COUNT" />
} else {
	<article class="article-page" id="either-or-gamemode-sub-article" tabindex="0" @onkeypress="HandleKeypress" @ref="gameDiv">
		@code {
			protected override async Task OnAfterRenderAsync(bool firstRender) {
				if (firstRender) await JS.InvokeVoidAsync("SetFocusToElement", gameDiv);
			}
		}

		<hgroup>
			<h2>EITHER OR MODE</h2>
		</hgroup>
		
		<style>
			@@keyframes slide-wrong {
				from {
					width: @(updateWidthWrong(ratioBefore));
				}

				to {
					width: @(updateWidthWrong(ratioAfter));
				}
			}

			@@keyframes slide-correct {
				from {
					width: @(updateWidthCorrect(ratioBefore));
				}

				to {
					width: @(updateWidthCorrect(ratioAfter));
				}
			}

			span#gamemode-statistics-wrong-animate-bar {
				animation: slide-wrong 1500ms forwards;
			}

			span#gamemode-statistics-correct-animate-bar {
				animation: slide-correct 1500ms forwards;
			}

			span#gamemode-statistics-wrong-guesses-bar {
				width: @(updateWidthWrong(ratioAfter));
			}

			span#gamemode-statistics-correct-guesses-bar {
				width: @(updateWidthCorrect(ratioAfter));
			}
		</style>

		<div id="gamemode-statistics">
			<span id="gamemode-statistics-wrong-progress" title="@(mc.GameC.EitherOrModel.WrongGuessesCount) WRONG GUESSES">
				<span id="gamemode-statistics-wrong-@guesses-bar"></span>
			</span>
			

			<button id="reset-button" @onclick="OnReset">
				<img src="/img/icons/arrow-clockwise.svg" alt="Reset gamemode button" id="reset-icon"/>
			</button>

			<span id="gamemode-statistics-correct-progress" title="@(mc.GameC.EitherOrModel.CorrectGuessesCount) CORRECT GUESSES">
				<span id="gamemode-statistics-correct-@guesses-bar"></span>
			</span>
		</div>

		<section id="first">
			<style>
				a#firstpick {
					background: linear-gradient(45deg, #@color[0].Item1.ToString("x") 0%, #@color[0].Item2.ToString("x") 100%);
				}

				a#secondpick {
					background: linear-gradient(45deg, #@color[1].Item1.ToString("x") 0%, #@color[1].Item2.ToString("x") 100%);
				}
			</style>
			<a id="firstpick" @onclick="async () => {  await checkClick(mc.GameC.EitherOrModel.GuessesPair[0]); }" disabled="@IsChecking">
				<p lang="ja" id="firstguess">@mc.GameC.EitherOrModel.GuessesPair[0]</p>
			</a>

			<a id="secondpick" @onclick="async () => await checkClick(mc.GameC.EitherOrModel.GuessesPair[1])" disabled="@IsChecking">
				<p lang="ja" id="secondguess">@mc.GameC.EitherOrModel.GuessesPair[1]</p>
			</a>
			<p id="@(romanjiType)">@mc.GameC.LookUp.Latin(mc.GameC.EitherOrModel.CorrectSyllable)</p>
		</section>
	</article>
}
