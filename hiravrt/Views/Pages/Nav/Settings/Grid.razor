@using hiravrt.Controllers
@using hiravrt.Controllers.Nav
@using hiravrt.Models.Nav.Settings.Grid
@using hiravrt.Models.Nav.Settings.Grid.Graphs

@rendermode InteractiveServer
@inject MainController mc

@{

	Dictionary<ToggleState, string> keyValuePairs = new() {
		{ ToggleState.ON, "on" }, { ToggleState.OFF, "off" }, { ToggleState.UNSET, "empty" },
	};

	string getToggle(int row, int col) {
		ToggleState result = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[row, col].Toggle;
		return keyValuePairs[result];
	}

	string getToggleRow(int row) {
		ToggleState result = mc.SettingsC.gridModel.GetCurrentGraph().RowToggle[row];
		return keyValuePairs[result];
	}

	string getToggleCol(int col) {
		ToggleState result = mc.SettingsC.gridModel.GetCurrentGraph().ColToggle[col];
		return keyValuePairs[result];
	}

	string getToggleConsonants() {
		ToggleState result = mc.SettingsC.gridModel.GetCurrentGraph().ConsonantsToggle;
		return keyValuePairs[result];
	}

	string getToggleVowels() {
		ToggleState result = mc.SettingsC.gridModel.GetCurrentGraph().VowelToggle;
		return keyValuePairs[result];
	}
}

<hgroup>
	<h3>ACTIVE  SYLLABLES: @mc.SettingsC.gridModel.AvailableSyllablesCount</h3>
</hgroup>

<section id="first">
	@switch (mc.SettingsC.gridModel.CurrentGraphState) {
		case GraphState.MONOGRAPH : {
			<nav id="syllable-graph-types">
				<a class="syllable-graph-on">MONOGRAPHS</a>
				<a class="syllable-graph-off" @onclick="() => mc.SettingsC.gridModel.NextGraph()">DIGRAPHS</a>
			</nav>
			<table id="toggle-button">
				@{
					string[] columnLatin = { "A", "I", "U", "E", "O" };
					string[] firstRowLatin = { "K", "S", "T", "N", "H" };
					string[] secondRowLatin = { "M", "Y", "R", "W", "N" };

					<tr class="toggle-button-row">
						<td class="toggle-button-data" title="TOGGLE DIACRITIC TO DAKUTEN AND HANDAKUTEN">
							<a class="toggle-button-diacritic" @onclick="() => mc.SettingsC.gridModel.NextDiacritic()">
								&#x25B2;
							</a>
						</td>

						<td class="toggle-button-data" title="TOGGLE CONSONANT HIRAGANA">
							<a class="toggle-button-array-@getToggleConsonants()" @onclick="() => { mc.SettingsC.gridModel.GetCurrentGraph().ToggleConsonants(); }">
								c:
							</a>
						</td>

						@for (int i = 0; i < columnLatin.Length; i++) {
							int x = i;
							<td class="toggle-button-data" title="TOGGLE @columnLatin[x] COLUMN">
								<a class="toggle-button-array-@getToggleCol(x + 1)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleColumn(x + 1)">
									@columnLatin[x]
								</a>
							</td>
						}
					</tr>

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-empty"></a>
						</td>

						<td class="toggle-button-data" title="TOGGLE VOWEL-ONLY HIRAGANA">
							<a class="toggle-button-array-@getToggleVowels()" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleVowels()">
								v:
							</a>
						</td>

						@for (int i = 1; i < mc.SettingsC.gridModel.GetCurrentGraph().Columns; i++) {
							int x = i;
							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[0, x].Kana;

							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(0, x)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(0, x)">
									@kana
								</a>
							</td>
						}
					</tr>
				}
				@for (int i = 0; i < firstRowLatin.Length; i++) {
					int x = i;

					<tr class="toggle-button-row">
						@if (mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + 1, 0].Toggle == ToggleState.UNSET) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						} else {
							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + 1, 0].Kana;

							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(x + 1, 0)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x + 1, 0)">
									@kana
								</a>
							</td>
						}


						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleRow(x + 1)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x + 1)">
								@firstRowLatin[x]
							</a>
						</td>

						@for (int j = 1; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
							int y = j;

							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + 1, y].Kana;
							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(x + 1, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x + 1, y)">
									@kana
								</a>
							</td>
						}
					</tr>
				}
				<tr class="toggle-button-row">
					@for (int i = 0; i < columnLatin.Length; i++) {
						<td class="toggle-button-data">
							<a class="toggle-button-empty"></a>
						</td>
					}
				</tr>
				@for (int i = 0; i < secondRowLatin.Length; i++) {
					int x = i + firstRowLatin.Length;

					<tr class="toggle-button-row">
						@if (mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + 1, 0].Toggle == ToggleState.UNSET) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						} else {
							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + 1, 0].Kana;

							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(x + 1, 0)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x + 1, 0)">
									@kana
								</a>
							</td>
						}


						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleRow(x + 1)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x + 1)">
								@secondRowLatin[i]
							</a>
						</td>

						@for (int j = 1; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
							int y = j;

							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + 1, y].Kana;
							if (kana.Length == 0) {
								<td class="toggle-button-data">
									<a class="toggle-button-@getToggle(x + 1, y)"></a>
								</td>
							} else {
								<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
									<a lang="ja" class="toggle-button-@getToggle(x + 1, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x + 1, y)">
										@kana
									</a>
								</td>
							}
						}
					</tr>
				}
			</table>
			break;
		}
		case GraphState.DIGRAPH : {
			<nav id="syllable-graph-types">
				<a class="syllable-graph-off" @onclick="() => mc.SettingsC.gridModel.NextGraph()">MONOGRAPHS</a>
				<a class="syllable-graph-on">DIGRAPHS</a>
			</nav>
			<table id="toggle-button">
				@{
					string[] columnLatin = { "YA", "YU", "YO" };
					string[] rowLatin = { "K", "S", "T", "N", "H", "M", "R" };
					string[] firstRowLatin = { "K", "S", "T", "N", "H" };
					string secondRowLatin = "M";
					string thirdRowLatin = "R";

					<tr class="toggle-button-row">

						<td class="toggle-button-data" title="TOGGLE DIACRITIC TO DAKUTEN AND HANDAKUTEN">
							<a class="toggle-button-diacritic" @onclick="() => mc.SettingsC.gridModel.NextDiacritic()">
								&#x25B2;
							</a>
						</td>

						@for (int i = 0; i < columnLatin.Length; i++) {
							int y = i;

							<td class="toggle-button-data">
								<a class="toggle-button-array-@getToggleCol(y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleColumn(y)">
									@columnLatin[y]
								</a>
							</td>
						}
					</tr>

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleConsonants()" @onclick="() => { mc.SettingsC.gridModel.GetCurrentGraph().ToggleConsonants(); }">
								c:
							</a>
						</td>

						@for (int i = 1; i < columnLatin.Length; i++) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						}
					</tr>

					for (int i = 0; i < firstRowLatin.Length; i++) {
						int x = i;

						<tr class="toggle-button-row">
							<td class="toggle-button-data">
								<a class="toggle-button-array-@getToggleRow(x)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x)">
									@firstRowLatin[x]
								</a>
							</td>

							@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
								int y = j;

								string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x, y].Kana;
								if (kana.Length == 0) {
									<td class="toggle-button-data">
										<a class="toggle-button-@getToggle(x, y)"></a>
									</td>
								} else {
									<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
										<a lang="ja" class="toggle-button-@getToggle(x, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x, y)">
											@kana
										</a>
									</td>
								}
							}
						</tr>
					}

					<tr class="toggle-button-row">
						@for (int i = 0; i < columnLatin.Length; i++) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						}
					</tr>

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleRow(firstRowLatin.Length)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(firstRowLatin.Length)">
								@secondRowLatin
							</a>
						</td>

						@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
							int y = j;

							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[firstRowLatin.Length, y].Kana;
							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(firstRowLatin.Length, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(firstRowLatin.Length, y)">
									@kana
								</a>
							</td>
						}
					</tr>

					<tr class="toggle-button-row">
						@for (int i = 0; i < columnLatin.Length; i++) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						}
					</tr>

					int last = firstRowLatin.Length + secondRowLatin.Length;
					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleRow(last)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(last)">
								@thirdRowLatin
							</a>
						</td>

						@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
							int y = j;

							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[last, y].Kana;
							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(last, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(last, y)">
									@kana
								</a>
							</td>
						}
					</tr>

					for (int i = 0; i < 2; i++) {
						<tr class="toggle-button-row">
							@for (int j = 0; j < columnLatin.Length; j++) {
								<td class="toggle-button-data">
									<a class="toggle-button-empty"></a>
								</td>
							}
						</tr>
					}
				}
			</table>
			break;
		}
		case GraphState.DIACRITIC_MONOGRAPG : {
			<nav id="syllable-graph-types">
				<a class="syllable-graph-on">MONOGRAPHS</a>
				<a class="syllable-graph-off" @onclick="() => mc.SettingsC.gridModel.NextGraph()">DIGRAPHS</a>
			</nav>
			<table id="toggle-button">
				<tr class="toggle">
					<td class="toggle-button-data">
						<a class="toggle-button-diacritic" @onclick="() => mc.SettingsC.gridModel.NextDiacritic()">
							&#x25BC;
						</a>
					</td>

					<td class="toggle-button-data">
						<a class="toggle-button-array-@getToggleConsonants()" @onclick="() => { mc.SettingsC.gridModel.GetCurrentGraph().ToggleConsonants(); }">
							c:
						</a>
					</td>

					@{
						string[] colLatin = { "A", "I", "U", "E", "O" };
					}
					@for (int i = 0; i < colLatin.Length; i++) {
						int y = i;
						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleCol(y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleColumn(y)">@colLatin[y]</a>
						</td>
					}
				</tr>
				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>

					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">v:</a>
					</td>

					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3042;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3044;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3046;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3048;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x304a;</a>
					</td>
				</tr>
				@{
					string[] firstRowLatin = { "G", "Z", "D" }, secondRowLatin = { "B", "P" };
				}
				@for (int i = 0; i < firstRowLatin.Length; i++) {
					int x = i;

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-empty"></a>
						</td>

						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleRow(x)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x)">
								@firstRowLatin[x]
							</a>
						</td>

						@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
							int y = j;

							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x, y].Kana;
							if (kana.Length == 0) {
								<td class="toggle-button-data">
									<a class="toggle-button-@getToggle(x, y)"></a>
								</td>
							} else {
								<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
									<a lang="ja" class="toggle-button-@getToggle(x, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x, y)">
										@kana
									</a>
								</td>
							}

						}
					</tr>
				}

				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">N</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x306a;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x306b;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x306c;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x306d;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x306e;</a>
					</td>
				</tr>

				@for (int i = 0; i < secondRowLatin.Length; i++) {
					int x = i;

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-empty"></a>
						</td>

						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleRow(x + firstRowLatin.Length)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x + firstRowLatin.Length)">
								@secondRowLatin[x]
							</a>
						</td>

						@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
							int y = j;

							string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x + firstRowLatin.Length, y].Kana;
							<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
								<a lang="ja" class="toggle-button-@getToggle(x + firstRowLatin.Length, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x + firstRowLatin.Length, y)">
									@kana
								</a>
							</td>
						}
					</tr>
				}
				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">M</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x307e;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x307f;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3080;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3081;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3082;</a>
					</td>
				</tr>
				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">Y</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3084;</a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3086;</a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3088;</a>
					</td>
				</tr>
				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">R</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3089;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x308a;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x308b;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x308c;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x308d;</a>
					</td>
				</tr>
				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">W</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x308f;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3090;</a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3091;</a>
					</td>
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3092;</a>
					</td>
				</tr>
				<tr class="toggle-button-row">
					<td class="toggle-button-data">
						<a lang="ja" class="toggle-button-unset">&#x3093;</a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-array-unset">N</a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
					<td class="toggle-button-data">
						<a class="toggle-button-empty"></a>
					</td>
				</tr>
			</table>
			break;
		}
		case GraphState.DIACRITIC_DIGRAPH : {
			<nav id="syllable-graph-types">
				<a class="syllable-graph-off" @onclick="() => mc.SettingsC.gridModel.NextGraph()">MONOGRAPHS</a>
				<a class="syllable-graph-on">DIGRAPHS</a>
			</nav>
			<table id="toggle-button">
				@{
					string[] columnLatin = { "YA", "YU", "YO" };
					string[] firstRowLatin = { "G", "Z", "D" };
					string[] secondRowLatin = { "B", "P" };

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-diacritic" @onclick="() => mc.SettingsC.gridModel.NextDiacritic()">
								&#x25BC;
							</a>
						</td>

						@for (int i = 0; i < columnLatin.Length; i++) {
							int y = i;

							<td class="toggle-button-data">
								<a class="toggle-button-array-@getToggleCol(y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleColumn(y)">
									@columnLatin[y]
								</a>
							</td>
						}
					</tr>

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-@getToggleConsonants()" @onclick="() => { mc.SettingsC.gridModel.GetCurrentGraph().ToggleConsonants(); }">
								c:
							</a>
						</td>

						@for (int i = 1; i < columnLatin.Length; i++) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						}
					</tr>

					for (int i = 0; i < firstRowLatin.Length; i++) {
						int x = i;

						<tr class="toggle-button-row">
							<td class="toggle-button-data">
								<a class="toggle-button-array-@getToggleRow(x)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x)">
									@firstRowLatin[x]
								</a>
							</td>

							@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
								int y = j;

								string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x, y].Kana;
								if (kana.Length == 0) {
									<td class="toggle-button-data">
										<a class="toggle-button-@getToggle(x, y)"></a>
									</td>
								} else {
									<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
										<a lang="ja" class="toggle-button-@getToggle(x, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x, y)">
											@kana
										</a>
									</td>
								}

							}
						</tr>
					}

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-unset">N</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x306b;&#x3083;
							</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x306b;&#x3085;
							</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x306b;&#x3087;
							</a>
						</td>
					</tr>

					for (int i = 0; i < secondRowLatin.Length; i++) {
						int x = i + firstRowLatin.Length;

						<tr class="toggle-button-row">
							<td class="toggle-button-data">
								<a class="toggle-button-array-@getToggleRow(x)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleRow(x)">
									@secondRowLatin[i]
								</a>
							</td>

							@for (int j = 0; j < mc.SettingsC.gridModel.GetCurrentGraph().Columns; j++) {
								int y = j;

								string kana = mc.SettingsC.gridModel.GetCurrentGraph().Graphs[x, y].Kana;
								if (kana.Length == 0) {
									<td class="toggle-button-data">
										<a class="toggle-button-@getToggle(x, y)"></a>
									</td>
								} else {
									<td class="toggle-button-data" title="@(mc.GameC.LookUp.Latin(kana)) @(mc.GameC.LookUp.Pronunciation(kana))">
										<a lang="ja" class="toggle-button-@getToggle(x, y)" @onclick="() => mc.SettingsC.gridModel.GetCurrentGraph().ToggleAt(x, y)">
											@kana
										</a>
									</td>
								}
							}
						</tr>
					}

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-unset">M</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x307f;&#x3083;
							</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x307f;&#x3085;
							</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x307f;&#x3087;
							</a>
						</td>
					</tr>

					<tr class="toggle-button-row">
						@for (int i = 0; i < columnLatin.Length; i++) {
							<td class="toggle-button-data">
								<a class="toggle-button-empty"></a>
							</td>
						}
					</tr>

					<tr class="toggle-button-row">
						<td class="toggle-button-data">
							<a class="toggle-button-array-unset">R</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x308a;&#x3083;
							</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x308a;&#x3085;
							</a>
						</td>

						<td class="toggle-button-data">
							<a lang="ja" class="toggle-button-unset">
								&#x308a;&#x3087;
							</a>
						</td>
					</tr>

					for (int i = 0; i < 2; i++) {
						<tr class="toggle-button-row">
							@for (int j = 0; j < columnLatin.Length; j++) {
								<td class="toggle-button-data">
									<a class="toggle-button-empty"></a>
								</td>
							}
						</tr>
					}
				}
			</table>
			break;
		}
	}
</section>
